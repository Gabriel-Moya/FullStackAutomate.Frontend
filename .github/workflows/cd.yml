name: Build and deploy a website to Amazon AWS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup Node.js environment
      uses: actions/setup-node@v1
      with:
        node-version: 18.16.1

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Generate static files
      run: npm run generate

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.REGION_FOR_REMOTE_STATE }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.6.6

    - name: Terraform format
      id: fmt
      run: terraform fmt -check
      working-directory: ./terraform

    - name: Terraform Init
      id: init
      run: terraform init -backend=true -backend-config="bucket=${{ secrets.BUCKET_FOR_REMOTE_STATE }}" -backend-config="key=${{ secrets.KEY_FOR_REMOTE_STATE }}" -backend-config="region=${{ secrets.REGION_FOR_REMOTE_STATE }}" -backend-config="dynamodb_table=${{ secrets.DYNAMO_TABLE_FOR_REMOTE_STATE }}"
      working-directory: ./terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./terraform

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ./terraform

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      shell: bash
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      shell: bash
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve
      working-directory: ./terraform

    - name: Terraform define outputs
      id: outputs
      run: |
        BUCKET_NAME=$(terraform output frontend_bucket | tr -d '"')
        echo "frontend_bucket=$BUCKET_NAME" >> $GITHUB_ENV
      working-directory: ./terraform

    - name: Deploy to S3
      env:
        BUCKET_NAME: ${{ needs.outputs.outputs.frontend_bucket }}
      run: |
        echo "frontend_bucket=$BUCKET_NAME" >> $GITHUB_ENV
        echo "BUCKET_NAME: Deploying to S3 bucket $BUCKET_NAME"
        echo "Env.: Deploying to S3 bucket ${{ env.frontend_bucket }}"
        aws s3 sync dist/ s3://${{ env.frontend_bucket }} --delete
